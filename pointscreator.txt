'use client'

import {
  MapContainer,
  ImageOverlay,
  Marker,
  Popup,
  Polyline,
} from 'react-leaflet'
import L, { LatLngTuple } from 'leaflet'
import floorplan from './floorplan.jpg' // Make sure the image is in the correct path

const imageWidth = 10
const imageHeight = imageWidth * (floorplan.height / floorplan.width)

const bounds: [[number, number], [number, number]] = [
  [0, 0],
  [imageWidth, -imageHeight],
]

const beaconIcon = new L.Icon({
  iconUrl: '/beacon.svg',
  iconSize: [24, 24],
  iconAnchor: [12, 12],
  popupAnchor: [0, -12],
})

const data = {
  nodes: [
    { name: 'B', coordinates: [3.203125, -11.34375] },
    { name: 'C', coordinates: [3.078125, -10.9375] },
    { name: 'D', coordinates: [3.8203125, -10.6796875] },
    { name: 'E', coordinates: [4.0078125, -10.53515625] },
    { name: 'F', coordinates: [4.36328125, -10.2578125] },
    { name: 'G', coordinates: [4.7265625, -9.90625] },
    { name: 'H', coordinates: [4.9375, -9.70703125] },
    { name: 'I', coordinates: [5.55859375, -8.9453125] },
    { name: 'J', coordinates: [5.33203125, -9.33203125] },
    { name: 'K', coordinates: [4.51953125, -9.32421875] },
    { name: 'L', coordinates: [5.19140625, -8.58203125] },
    { name: 'M', coordinates: [4.34765625, -9.515625] },
    { name: 'N', coordinates: [3.62109375, -10.2109375] },
    { name: 'O', coordinates: [4.61328125, -10.6953125] },
    { name: 'P', coordinates: [4.25390625, -10.8828125] },
    { name: 'Q', coordinates: [4.94140625, -10.49609375] },
    { name: 'R', coordinates: [5.484375, -9.921875] },
    { name: 'S', coordinates: [5.7265625, -9.5546875] },
    { name: 'T', coordinates: [5.93359375, -9.25390625] },
    { name: 'U', coordinates: [6.2421875, -8.5625] },
    { name: 'V', coordinates: [6.3515625, -8.1875] },
    { name: 'W', coordinates: [5.984375, -8.08203125] },
    { name: 'X', coordinates: [5.84375, -8.4375] },
    { name: 'Y', coordinates: [3.56640625, -11.24609375] },
  ] as { name: string; coordinates: LatLngTuple }[],
  paths: [
    ['Y', 'B'],
    ['B', 'C'],
    ['C', 'D'],
    ['D', 'E'],
    ['E', 'N'],
    ['E', 'F'],
    ['F', 'G'],
    ['G', 'M'],
    ['H', 'G'],
    ['H', 'K'],
    ['H', 'J'],
    ['J', 'I'],
    ['I', 'L'],
    ['S', 'J'],
    ['S', 'R'],
    ['S', 'T'],
    ['I', 'X'],
    ['X', 'W'],
    ['V', 'W'],
    ['U', 'V'],
    ['O', 'F'],
    ['O', 'P'],
    ['Q', 'O'],
  ],
  beacons: [
    { name: 'B1', coordinates: [3.84765625, -10.890625] },
    { name: 'B2', coordinates: [4.15625, -10.07421875] },
    { name: 'B3', coordinates: [5.0859375, -10.046875] },
    { name: 'B4', coordinates: [5.09375, -9.12109375] },
    { name: 'B5', coordinates: [5.921875, -8.82421875] },
  ] as { name: string; coordinates: LatLngTuple }[],
}

export default function FloorPlanMap() {
  return (
    <div style={{ height: '100vh', width: '100%' }}>
      <MapContainer
        center={[imageWidth / 2, -imageHeight / 2]}
        zoom={6.5}
        style={{ height: '100%', width: '100%' }}
        crs={L.CRS.Simple}
      >
        <ImageOverlay url={floorplan.src} bounds={bounds} />

        {data.nodes.map((node) => (
          <Marker key={node.name} position={node.coordinates}>
            <Popup>{`${node.name}: [${node.coordinates[0].toFixed(
              2
            )}, ${node.coordinates[1].toFixed(2)}]`}</Popup>
          </Marker>
        ))}

        {data.paths.map((path, index) => {
          const startNode = data.nodes.find((node) => node.name === path[0])
          const endNode = data.nodes.find((node) => node.name === path[1])
          if (!startNode || !endNode) return null
          return (
            <Polyline
              key={index}
              positions={[startNode.coordinates, endNode.coordinates]}
              color="blue"
            />
          )
        })}

        {data.beacons.map((beacon) => (
          <Marker
            key={beacon.name}
            position={beacon.coordinates}
            icon={beaconIcon}
          >
            <Popup>{`Beacon ${beacon.name}: [${beacon.coordinates[0].toFixed(
              2
            )}, ${beacon.coordinates[1].toFixed(2)}]`}</Popup>
          </Marker>
        ))}
      </MapContainer>
    </div>
  )
}





///////// v2


'use client'

import {
  MapContainer,
  ImageOverlay,
  Marker,
  Popup,
  Polyline,
} from 'react-leaflet'
import L, { LatLngTuple } from 'leaflet'
import floorplan from './floorplan.jpg' // Make sure the image is in the correct path
import { useEffect, useState } from 'react'

const imageWidth = 10
const imageHeight = imageWidth * (floorplan.height / floorplan.width)

const bounds: [[number, number], [number, number]] = [
  [0, 0],
  [imageWidth, -imageHeight],
]

const beaconIcon = new L.Icon({
  iconUrl: '/beacon.svg',
  iconSize: [24, 24],
  iconAnchor: [12, 12],
  popupAnchor: [0, -12],
})

const data = {
  nodes: [
    { name: 'B', coordinates: [3.203125, -11.34375] },
    { name: 'C', coordinates: [3.078125, -10.9375] },
    { name: 'D', coordinates: [3.8203125, -10.6796875] },
    { name: 'E', coordinates: [4.0078125, -10.53515625] },
    { name: 'F', coordinates: [4.36328125, -10.2578125] },
    { name: 'G', coordinates: [4.7265625, -9.90625] },
    { name: 'H', coordinates: [4.9375, -9.70703125] },
    { name: 'I', coordinates: [5.55859375, -8.9453125] },
    { name: 'J', coordinates: [5.33203125, -9.33203125] },
    { name: 'K', coordinates: [4.51953125, -9.32421875] },
    { name: 'L', coordinates: [5.19140625, -8.58203125] },
    { name: 'M', coordinates: [4.34765625, -9.515625] },
    { name: 'N', coordinates: [3.62109375, -10.2109375] },
    { name: 'O', coordinates: [4.61328125, -10.6953125] },
    { name: 'P', coordinates: [4.25390625, -10.8828125] },
    { name: 'Q', coordinates: [4.94140625, -10.49609375] },
  ],
  paths: [
    ['B', 'C'],
    ['C', 'D'],
    ['D', 'E'],
    ['E', 'N'],
    ['E', 'F'],
    ['F', 'G'],
    ['G', 'M'],
    ['H', 'G'],
    ['H', 'K'],
    ['H', 'J'],
    ['J', 'I'],
    ['I', 'L'],
    ['S', 'J'],
    ['S', 'R'],
    ['S', 'T'],
    ['I', 'X'],
    ['X', 'W'],
    ['V', 'W'],
    ['U', 'V'],
    ['O', 'F'],
    ['O', 'P'],
    ['Q', 'O'],
  ],
  beacons: [
    { name: 'B1', coordinates: [3.84765625, -10.890625] },
    { name: 'B2', coordinates: [4.15625, -10.07421875] },
    { name: 'B3', coordinates: [5.0859375, -10.046875] },
  ],
}

function findShortestPath(start: string, end: string) {
  const distances: Record<string, number> = {}
  const previous: Record<string, string | null> = {}
  const queue: string[] = []

  data.nodes.forEach((node) => {
    distances[node.name] = Infinity
    previous[node.name] = null
    queue.push(node.name)
  })

  distances[start] = 0

  while (queue.length) {
    queue.sort((a, b) => distances[a] - distances[b])
    const current = queue.shift()!

    if (current === end) break

    data.paths.forEach(([nodeA, nodeB]) => {
      if (current === nodeA || current === nodeB) {
        const neighbor = current === nodeA ? nodeB : nodeA
        if (!queue.includes(neighbor)) return

        const alt = distances[current] + 1
        if (alt < distances[neighbor]) {
          distances[neighbor] = alt
          previous[neighbor] = current
        }
      }
    })
  }

  const path: string[] = []
  let step: string | null = end
  while (step) {
    path.unshift(step)
    step = previous[step]
  }

  return path
}

export default function FloorPlanMap() {
  const [shortestPath, setShortestPath] = useState<string[]>([])

  useEffect(() => {
    window.addEventListener('message', (event) => {
      if (event.data && event.data.start && event.data.end) {
        setShortestPath(findShortestPath(event.data.start, event.data.end))
      }
    })
  }, [])

  return (
    <div style={{ height: '100vh', width: '100%' }}>
      <MapContainer
        center={[imageWidth / 2, -imageHeight / 2]}
        zoom={6.5}
        style={{ height: '100%', width: '100%' }}
        crs={L.CRS.Simple}
      >
        <ImageOverlay url={floorplan.src} bounds={bounds} />

        {shortestPath.length > 1 && (
          <Polyline
            positions={shortestPath
              .map(
                (name) =>
                  data.nodes.find((node) => node.name === name)
                    ?.coordinates as LatLngTuple
              )
              .filter(
                (coord): coord is LatLngTuple =>
                  Array.isArray(coord) && coord.length === 2
              )}
            color="red"
          />
        )}
      </MapContainer>
    </div>
  )
}


/////////// clicker

'use client'

import { useState, useCallback } from 'react'
import {
  MapContainer,
  ImageOverlay,
  Marker,
  Popup,
  Polyline,
  useMapEvents,
} from 'react-leaflet'
import L from 'leaflet'
import floorplan from './floorplan.jpg'

const imageWidth = 10 // Adjust based on your image's aspect ratio
const imageHeight = imageWidth * (floorplan.height / floorplan.width)

const bounds: [[number, number], [number, number]] = [
  [0, 0], // Top-left corner
  [imageWidth, -imageHeight], // Bottom-right corner (negative to prevent flipping)
]

export default function FloorPlanMap() {
  const [points, setPoints] = useState<{ [key: string]: [number, number] }>({})
  const [counter, setCounter] = useState(65) // ASCII 'A'
  const [paths, setPaths] = useState<[string, string][]>([])
  const [selectedPoints, setSelectedPoints] = useState<string[]>([])

  const handleMapClick = useCallback(
    (e) => {
      console.log('Map clicked at:', e.latlng)
      if (e.originalEvent.ctrlKey) {
        handleCtrlClick(e)
        return
      }
      setPoints((prev) => {
        const newPointKey = String.fromCharCode(counter)
        console.log('Adding point:', newPointKey, e.latlng)
        return { ...prev, [newPointKey]: [e.latlng.lat, e.latlng.lng] }
      })
      setCounter((prev) => prev + 1)
    },
    [counter]
  )

  const handleRightClick = useCallback((e) => {
    console.log('Right-click at:', e.latlng)
    setPoints((prev) => {
      const closestKey = Object.keys(prev).find(
        (key) =>
          Math.abs(prev[key][0] - e.latlng.lat) < 0.1 &&
          Math.abs(prev[key][1] - e.latlng.lng) < 0.1
      )
      if (!closestKey) return prev
      console.log('Removing point:', closestKey)
      const newPoints = { ...prev }
      delete newPoints[closestKey]
      return newPoints
    })
  }, [])

  const handleCtrlClick = useCallback(
    (e) => {
      console.log('Ctrl-click at:', e.latlng)
      const clickedKey = Object.keys(points).find(
        (key) =>
          Math.abs(points[key][0] - e.latlng.lat) < 0.1 &&
          Math.abs(points[key][1] - e.latlng.lng) < 0.1
      )
      if (!clickedKey) return

      setSelectedPoints((prev) => {
        if (prev.length === 1) {
          console.log('Creating path between:', prev[0], 'and', clickedKey)
          setPaths((paths) => {
            const newPath: [string, string] = [prev[0], clickedKey]
            const isDuplicate = paths.some(
              (path) =>
                (path[0] === newPath[0] && path[1] === newPath[1]) ||
                (path[0] === newPath[1] && path[1] === newPath[0])
            )
            if (!isDuplicate) {
              return [...paths, newPath]
            }
            return paths
          })
          return []
        }
        console.log('First point selected for path:', clickedKey)
        return [clickedKey]
      })
    },
    [points]
  )

  const copyDataToClipboard = () => {
    const data = {
      nodes: Object.entries(points).map(([key, coord]) => ({
        name: key,
        coordinates: coord,
      })),
      paths: paths,
    }
    navigator.clipboard.writeText(JSON.stringify(data, null, 2))
    console.log('Copied data to clipboard:', data)
    alert('Node and path data copied to clipboard!')
  }

  function MapClickHandler() {
    useMapEvents({
      click: handleMapClick,
      contextmenu: handleRightClick,
    })
    return null
  }

  return (
    <div style={{ height: '100vh', width: '100%' }}>
      <button
        onClick={copyDataToClipboard}
        style={{ position: 'absolute', top: 10, right: 10, zIndex: 1000 }}
      >
        Copy Nodes & Paths
      </button>
      <MapContainer
        center={[imageWidth / 2, -imageHeight / 2]}
        zoom={1}
        style={{ height: '100%', width: '100%' }}
        crs={L.CRS.Simple} // Ensures correct scaling for image overlays
      >
        <ImageOverlay url={floorplan.src} bounds={bounds} />
        <MapClickHandler />
        {Object.entries(points).map(([key, coord]) => (
          <Marker key={key} position={coord}>
            <Popup>{`${key}: [${coord[0].toFixed(2)}, ${coord[1].toFixed(
              2
            )}]`}</Popup>
          </Marker>
        ))}
        {paths.map((path, index) => (
          <Polyline
            key={index}
            positions={[points[path[0]], points[path[1]]]}
            color="blue"
          />
        ))}
      </MapContainer>
    </div>
  )
}